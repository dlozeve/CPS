#+TITLE: CPS3: Simulation of the Brownian motion
#+AUTHOR: Dimitri Lozeve
#+EMAIL: dimitri.lozeve@polytechnique.edu

#+PROPERTY: header-args :tangle yes
#+HTML_MATHJAX:  path:"http://cdn.mathjax.org/mathjax/latest/MathJax.js"


#+BEGIN_SRC ipython :session  :exports both
  import numpy as np
  from scipy import stats
  import matplotlib
  matplotlib.use("Qt5Agg")
  import matplotlib.pyplot as plt
  plt.style.use("ggplot")
  %matplotlib inline
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session  :exports both
  def brownianmotion(T,n):
      """Returns a Brownian motion of size 2**n, with total time T.
      
      """
      # standard normal distributed random variables Z_i
      z = stats.norm.rvs(size=2**n)
      w = np.zeros(2**n)
      var = np.sqrt(2**(-n) * T)
      for i in range(1,2**n):
          w[i] = w[i-1] + z[i]*var
      return w
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both
  def I(bm):
      delta = bm[1:] - bm[:-1]
      return delta.dot(bm[:-1])

  def J(bm):
      delta = bm[1:] - bm[:-1]
      return delta.dot(bm[1:])

  def K(bm):
      delta = bm[1:] - bm[:-1]
      return delta.dot((bm[:-1] + bm[1:])/2)

  def halfsquared(bm):
      return bm[-1]**2 * 0.5
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both
  # We compute N copies of the discretized Brownian motion.

  N = 10000
  n = 10

  res = np.zeros((N,2**n))
  for j in range(N):
      res[j] = brownianmotion(1,n)
  res
#+END_SRC

#+RESULTS:
#+begin_example
array([[ 0.        ,  0.06055285,  0.04914129, ...,  1.44096105,
         1.46685729,  1.46481259],
       [ 0.        ,  0.04663562,  0.06259768, ...,  1.59509701,
         1.61429274,  1.64867964],
       [ 0.        ,  0.02147185,  0.01613599, ..., -1.09182284,
        -1.11204257, -1.09507843],
       ..., 
       [ 0.        ,  0.00713491,  0.0288439 , ..., -0.17145026,
        -0.19826358, -0.2184908 ],
       [ 0.        , -0.0364723 , -0.02026647, ..., -0.18797628,
        -0.23196186, -0.23083612],
       [ 0.        ,  0.06385073,  0.09368815, ...,  0.97507075,
         0.97686936,  0.98648747]])
#+end_example

#+BEGIN_SRC ipython :session :exports both
  isample = np.apply_along_axis(I, 1, res)
  jsample = np.apply_along_axis(J, 1, res)
  ksample = np.apply_along_axis(K, 1, res)

  hssample = np.apply_along_axis(halfsquared, 1, res)

  isample = hssample - isample
  jsample = hssample - jsample
  ksample = hssample - ksample
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both
  isample.mean(), jsample.mean(), ksample.mean()
#+END_SRC

#+RESULTS:
| 0.49993753315459233 | -0.49993753315459233 | 5.751815290425827e-19 |

