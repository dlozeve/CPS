#+TITLE: CPS3: Simulation of the Brownian motion
#+AUTHOR: Dimitri Lozeve
#+EMAIL: dimitri.lozeve@polytechnique.edu

#+PROPERTY: header-args :tangle yes
#+HTML_MATHJAX:  path:"http://cdn.mathjax.org/mathjax/latest/MathJax.js"


#+BEGIN_SRC ipython :session  :exports both
  import numpy as np
  from scipy import stats
  import matplotlib
  matplotlib.use("Qt5Agg")
  import matplotlib.pyplot as plt
  plt.style.use("ggplot")
  %matplotlib inline
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session  :exports both
  def brownianmotion(T,n):
      """Returns a Brownian motion of size 2**n, with total time T.
      
      """
      # standard normal distributed random variables Z_i
      z = stats.norm.rvs(size=2**n)
      w = np.zeros(2**n)
      var = np.sqrt(2**(-n) * T)
      for i in range(1,2**n):
          w[i] = w[i-1] + z[i]*var
      return w
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both
  def I(bm):
      delta = bm[1:] - bm[:-1]
      return delta.dot(bm[:-1])

  def J(bm):
      delta = bm[1:] - bm[:-1]
      return delta.dot(bm[1:])

  def K(bm):
      delta = bm[1:] - bm[:-1]
      return delta.dot((bm[:-1] + bm[1:])/2)

  def halfsquared(bm):
      return bm[-1]**2 * 0.5
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both
  def approximationsijk(N, n):
      """Creates a sample of N copies of the random variables 1/2*W_T^2 -
      I_n, 1/2*W_T^2 - J_n, and 1/2*W_T^2 - K_n, and returns their
      sample means.

      """
      # We generate N Brownian motions of length 2**n.
      bms = np.zeros((N,2**n))
      for j in range(N):
          bms[j] = brownianmotion(1,n)
      # Then we compute the quantities I, J, and K.
      isample = np.apply_along_axis(I, 1, bms)
      jsample = np.apply_along_axis(J, 1, bms)
      ksample = np.apply_along_axis(K, 1, bms)
      hssample = np.apply_along_axis(halfsquared, 1, bms)
      isample = hssample - isample
      jsample = hssample - jsample
      ksample = hssample - ksample
      return [isample.mean(), jsample.mean(), ksample.mean()]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both
  N = 1000
  res = np.zeros((10, 3))
  for n in range(10):
      res[n] = approximationsijk(N, n+10)
  res = res.transpose()
#+END_SRC

#+RESULTS:
#+begin_example
array([[  4.98743594e-01,   4.99522292e-01,   5.00143890e-01,
          5.00270365e-01,   4.99932691e-01,   5.00003248e-01,
          4.99962700e-01,   4.99999468e-01,   5.00006155e-01,
          5.00011635e-01],
       [ -4.98743594e-01,  -4.99522292e-01,  -5.00143890e-01,
         -5.00270365e-01,  -4.99932691e-01,  -5.00003248e-01,
         -4.99962700e-01,  -4.99999468e-01,  -5.00006155e-01,
         -5.00011635e-01],
       [ -1.89112147e-18,   1.17920878e-17,   2.05272263e-17,
          2.55972346e-18,  -6.55839226e-18,  -3.47130894e-18,
          3.29931778e-17,   1.25803546e-16,  -4.45692066e-17,
          8.25997317e-17]])
#+end_example

#+BEGIN_SRC ipython :session :file /home/dimitri/cours/3A/MAP552/CPS/CPS3/imean.png :exports both
  plt.plot(res[0])
#+END_SRC

#+RESULTS:
[[file:/home/dimitri/cours/3A/MAP552/CPS/CPS3/imean.png]]

#+BEGIN_SRC ipython :session :file /home/dimitri/cours/3A/MAP552/CPS/CPS3/jmean.png :exports both
  plt.plot(res[1])
#+END_SRC

#+RESULTS:
[[file:/home/dimitri/cours/3A/MAP552/CPS/CPS3/jmean.png]]

#+BEGIN_SRC ipython :session :file /home/dimitri/cours/3A/MAP552/CPS/CPS3/kmean.png :exports both
  plt.plot(res[2])
#+END_SRC

#+RESULTS:
[[file:/home/dimitri/cours/3A/MAP552/CPS/CPS3/kmean.png]]

